/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'com.github.johnrengelman.shadow'
    id "org.jetbrains.kotlin.kapt"
}

group 'skeleton'
version VERSION_NAME
mainClassName = "com.tombspawn.skeleton.Skeleton"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src/main/kotlin']
    test.kotlin.srcDirs = test.java.srcDirs = ['test/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.resources.srcDirs = ['src/test/resources']
}


compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    kotlinOptions.jvmTarget = "1.8"
}

kapt {
    correctErrorTypes = true
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
    generateStubs = true
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

shadowJar {
    archiveName = "application.jar"
}

dependencies {
    implementation project(":base")

    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    implementation Kotlin.stdlib

    implementation Apache.commonIO
    implementation Apache.zip
    implementation Apache.text

    implementation Ktor.jvmLogging
    implementation Ktor.netty
    implementation Ktor.json
    implementation Ktor.gson
    implementation Ktor.apache
    implementation Ktor.core
    implementation Ktor.locations
    implementation Ktor.ktorGson
    implementation Jgit.lib

    implementation GRPC.netty
    implementation GRPC.protobuf
    implementation GRPC.stub

    api Dagger.lib
    kapt Dagger.annotationProcessor
    api Dagger.assistedInjectLib
    kapt Dagger.assistedInjectProcessor

    testImplementation Testing.ktor
}

task copyConfigFiles(type: Copy) {
    from "$projectDir/Dockerfile", "$projectDir/gradle.properties",
            "$projectDir/AndroidDockerfile", "$projectDir/setup_android_sdk.sh"
    into "$rootDir/output/skeleton/"
}

task generateApplication(type: Copy) {
    dependsOn assemble
    dependsOn copyConfigFiles
    from "$buildDir/libs/application.jar"
    into "$rootDir/output/skeleton/build/libs/"
}

application {
    // Define the main class for the application
    mainClassName = 'com.tombspawn.skeleton.Skeleton'
}
